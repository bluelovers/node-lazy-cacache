"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const entry_index_1 = require("cacache/lib/entry-index");
const cache_path_1 = require("cache-path");
const bluebird = require("bluebird");
const debug_color2_1 = require("debug-color2");
const path = require("upath2");
const deleteEmpty = require("delete-empty");
exports.deleteEmpty = deleteEmpty;
const _contentPath = require("cacache/lib/content/path");
const ssri = require("ssri");
exports.debugConsole = new debug_color2_1.Console(null, {
    label: true,
    time: true,
});
exports.debugConsole.inspectOptions = {
    colors: exports.debugConsole.enabledColor,
};
exports.debugConsole.enabled = false;
function enableDebug(bool) {
    if (bool || typeof bool === 'undefined') {
        exports.debugConsole.enabled = true;
    }
    else if (bool === false) {
        exports.debugConsole.enabled = false;
    }
    return exports.debugConsole.enabled;
}
exports.enableDebug = enableDebug;
function getCacheDirPath(name, options, isAsync) {
    options = options || {};
    let fnOrder = [];
    if (options.getCachePathOptions && options.getCachePathOptions.fnOrder) {
        fnOrder.push(...options.getCachePathOptions.fnOrder);
    }
    if (options.useGlobalCache) {
        fnOrder.push(...[
            cache_path_1.findNpmCachePath,
            cache_path_1.getOSTempPath,
            cache_path_1.findPkgModulePath,
        ]);
    }
    if (!fnOrder || !fnOrder.length) {
        fnOrder = null;
    }
    let opts = Object.assign({}, options.getCachePathOptions, { name, create: true, fnOrder });
    let fn = isAsync ? cache_path_1.getCachePathAsync : cache_path_1.getCachePath;
    return fn(opts);
}
exports.getCacheDirPath = getCacheDirPath;
function getOptions(options) {
    if (typeof options === 'string') {
        options = {
            name: options,
        };
    }
    options = options || {};
    if (!options.cachePath && options.name) {
        options.cachePath = getCacheDirPath(options.name, options);
    }
    options.getCachePathOptions = options.getCachePathOptions || {};
    return options;
}
exports.getOptions = getOptions;
function getOptionsAsync(options) {
    if (typeof options === 'string') {
        options = {
            name: options,
        };
    }
    return bluebird.resolve(options || {})
        .then(async function (options) {
        if (!options.cachePath && options.name) {
            options.cachePath = await getCacheDirPath(options.name, options, true);
        }
        options.getCachePathOptions = options.getCachePathOptions || {};
        return options;
    });
}
exports.getOptionsAsync = getOptionsAsync;
function bucketPath(key, cachePath) {
    let fullpath = entry_index_1._bucketPath(cachePath, key);
    let p = path.relative(cachePath, fullpath);
    return {
        fullpath,
        path: p,
    };
}
exports.bucketPath = bucketPath;
function contentPath(integrity, cachePath) {
    let fullpath = _contentPath(cachePath, integrity);
    let p = path.relative(cachePath, fullpath);
    return {
        fullpath,
        path: p,
    };
}
exports.contentPath = contentPath;
function ssriData(data) {
    return ssri.fromData(data);
}
exports.ssriData = ssriData;
function ssriJSON(data, integrity) {
    return hashData(JSON.stringify(data));
}
exports.ssriJSON = ssriJSON;
function hashData(data) {
    return ssri.stringify(ssriData(data));
}
exports.hashData = hashData;
// @ts-ignore
exports = Object.freeze(exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBc0Q7QUFDdEQsMkNBQWlIO0FBQ2pILHFDQUFzQztBQUN0QywrQ0FBdUM7QUFDdkMsK0JBQStCO0FBRS9CLDRDQUE2QztBQUtwQyxrQ0FBVztBQUpwQix5REFBMEQ7QUFDMUQsNkJBQThCO0FBS2pCLFFBQUEsWUFBWSxHQUFHLElBQUksc0JBQU8sQ0FBQyxJQUFJLEVBQUU7SUFDN0MsS0FBSyxFQUFFLElBQUk7SUFDWCxJQUFJLEVBQUUsSUFBSTtDQUNWLENBQUMsQ0FBQztBQUVILG9CQUFZLENBQUMsY0FBYyxHQUFHO0lBQzdCLE1BQU0sRUFBRSxvQkFBWSxDQUFDLFlBQVk7Q0FDakMsQ0FBQztBQUVGLG9CQUFZLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUU3QixTQUFnQixXQUFXLENBQUMsSUFBYztJQUV6QyxJQUFJLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLEVBQ3ZDO1FBQ0Msb0JBQVksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0tBQzVCO1NBQ0ksSUFBSSxJQUFJLEtBQUssS0FBSyxFQUN2QjtRQUNDLG9CQUFZLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztLQUM3QjtJQUVELE9BQU8sb0JBQVksQ0FBQyxPQUFPLENBQUM7QUFDN0IsQ0FBQztBQVpELGtDQVlDO0FBSUQsU0FBZ0IsZUFBZSxDQUFDLElBQVksRUFBRSxPQUF3QixFQUFFLE9BQWlCO0lBRXhGLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0lBRXhCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUVqQixJQUFJLE9BQU8sQ0FBQyxtQkFBbUIsSUFBSSxPQUFPLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUN0RTtRQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFD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QUFRLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDM0IsQ0FBQztBQUhELDRCQUdDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFrQjtJQUVoRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUhELDRCQUdDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLElBQW9DO0lBRTVELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBSEQsNEJBR0M7QUFFRCxhQUFhO0FBQ2IsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfYnVja2V0UGF0aCB9IGZyb20gJ2NhY2FjaGUvbGliL2VudHJ5LWluZGV4JztcbmltcG9ydCB7IGdldENhY2hlUGF0aCwgZmluZE5wbUNhY2hlUGF0aCwgZ2V0T1NUZW1wUGF0aCwgZmluZFBrZ01vZHVsZVBhdGgsIGdldENhY2hlUGF0aEFzeW5jIH0gZnJvbSAnY2FjaGUtcGF0aCc7XG5pbXBvcnQgYmx1ZWJpcmQgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuaW1wb3J0IHsgQ29uc29sZSB9IGZyb20gJ2RlYnVnLWNvbG9yMic7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3VwYXRoMic7XG5pbXBvcnQgeyBJQ2FjYWNoZU9wdGlvbnMgfSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgZGVsZXRlRW1wdHkgPSByZXF1aXJlKCdkZWxldGUtZW1wdHknKTtcbmltcG9ydCBfY29udGVudFBhdGggPSByZXF1aXJlKCdjYWNhY2hlL2xpYi9jb250ZW50L3BhdGgnKTtcbmltcG9ydCBzc3JpID0gcmVxdWlyZSgnc3NyaScpO1xuaW1wb3J0IFR5cGVkQXJyYXkgPSBOb2RlSlMuVHlwZWRBcnJheTtcblxuZXhwb3J0IHsgZGVsZXRlRW1wdHkgfVxuXG5leHBvcnQgY29uc3QgZGVidWdDb25zb2xlID0gbmV3IENvbnNvbGUobnVsbCwge1xuXHRsYWJlbDogdHJ1ZSxcblx0dGltZTogdHJ1ZSxcbn0pO1xuXG5kZWJ1Z0NvbnNvbGUuaW5zcGVjdE9wdGlvbnMgPSB7XG5cdGNvbG9yczogZGVidWdDb25zb2xlLmVuYWJsZWRDb2xvcixcbn07XG5cbmRlYnVnQ29uc29sZS5lbmFibGVkID0gZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVEZWJ1Zyhib29sPzogYm9vbGVhbilcbntcblx0aWYgKGJvb2wgfHwgdHlwZW9mIGJvb2wgPT09ICd1bmRlZmluZWQnKVxuXHR7XG5cdFx0ZGVidWdDb25zb2xlLmVuYWJsZWQgPSB0cnVlO1xuXHR9XG5cdGVsc2UgaWYgKGJvb2wgPT09IGZhbHNlKVxuXHR7XG5cdFx0ZGVidWdDb25zb2xlLmVuYWJsZWQgPSBmYWxzZTtcblx0fVxuXG5cdHJldHVybiBkZWJ1Z0NvbnNvbGUuZW5hYmxlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENhY2hlRGlyUGF0aChuYW1lOiBzdHJpbmcsIG9wdGlvbnM6IElDYWNhY2hlT3B0aW9ucywgaXNBc3luYzogdHJ1ZSk6IGJsdWViaXJkPHN0cmluZz5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWNoZURpclBhdGgobmFtZTogc3RyaW5nLCBvcHRpb25zOiBJQ2FjYWNoZU9wdGlvbnMsIGlzQXN5bmM/OiBib29sZWFuKTogc3RyaW5nXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FjaGVEaXJQYXRoKG5hbWU6IHN0cmluZywgb3B0aW9uczogSUNhY2FjaGVPcHRpb25zLCBpc0FzeW5jPzogYm9vbGVhbilcbntcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0bGV0IGZuT3JkZXIgPSBbXTtcblxuXHRpZiAob3B0aW9ucy5nZXRDYWNoZVBhdGhPcHRpb25zICYmIG9wdGlvbnMuZ2V0Q2FjaGVQYXRoT3B0aW9ucy5mbk9yZGVyKVxuXHR7XG5cdFx0Zm5PcmRlci5wdXNoKC4uLm9wdGlvbnMuZ2V0Q2FjaGVQYXRoT3B0aW9ucy5mbk9yZGVyKTtcblx0fVxuXG5cdGlmIChvcHRpb25zLnVzZUdsb2JhbENhY2hlKVxuXHR7XG5cdFx0Zm5PcmRlci5wdXNoKC4uLltcblx0XHRcdGZpbmROcG1DYWNoZVBhdGgsXG5cdFx0XHRnZXRPU1RlbXBQYXRoLFxuXHRcdFx0ZmluZFBrZ01vZHVsZVBhdGgsXG5cdFx0XSk7XG5cdH1cblxuXHRpZiAoIWZuT3JkZXIgfHwgIWZuT3JkZXIubGVuZ3RoKVxuXHR7XG5cdFx0Zm5PcmRlciA9IG51bGw7XG5cdH1cblxuXHRsZXQgb3B0cyA9IHtcblx0XHQuLi5vcHRpb25zLmdldENhY2hlUGF0aE9wdGlvbnMsXG5cdFx0bmFtZSxcblx0XHRjcmVhdGU6IHRydWUsXG5cdFx0Zm5PcmRlcixcblx0fTtcblxuXHRsZXQgZm4gPSBpc0FzeW5jID8gZ2V0Q2FjaGVQYXRoQXN5bmMgOiBnZXRDYWNoZVBhdGg7XG5cblx0cmV0dXJuIGZuKG9wdHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3B0aW9ucyhvcHRpb25zPzogc3RyaW5nIHwgSUNhY2FjaGVPcHRpb25zKVxue1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKVxuXHR7XG5cdFx0b3B0aW9ucyA9IHtcblx0XHRcdG5hbWU6IG9wdGlvbnMsXG5cdFx0fVxuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0aWYgKCFvcHRpb25zLmNhY2hlUGF0aCAmJiBvcHRpb25zLm5hbWUpXG5cdHtcblx0XHRvcHRpb25zLmNhY2hlUGF0aCA9IGdldENhY2hlRGlyUGF0aChvcHRpb25zLm5hbWUsIG9wdGlvbnMpO1xuXHR9XG5cblx0b3B0aW9ucy5nZXRDYWNoZVBhdGhPcHRpb25zID0gb3B0aW9ucy5nZXRDYWNoZVBhdGhPcHRpb25zIHx8IHt9O1xuXG5cdHJldHVybiBvcHRpb25zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3B0aW9uc0FzeW5jKG9wdGlvbnM/OiBzdHJpbmcgfCBJQ2FjYWNoZU9wdGlvbnMpXG57XG5cdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpXG5cdHtcblx0XHRvcHRpb25zID0ge1xuXHRcdFx0bmFtZTogb3B0aW9ucyxcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYmx1ZWJpcmQucmVzb2x2ZShvcHRpb25zIHx8IHt9KVxuXHRcdC50aGVuKGFzeW5jIGZ1bmN0aW9uIChvcHRpb25zOiBJQ2FjYWNoZU9wdGlvbnMpXG5cdFx0e1xuXHRcdFx0aWYgKCFvcHRpb25zLmNhY2hlUGF0aCAmJiBvcHRpb25zLm5hbWUpXG5cdFx0XHR7XG5cdFx0XHRcdG9wdGlvbnMuY2FjaGVQYXRoID0gYXdhaXQgZ2V0Q2FjaGVEaXJQYXRoKG9wdGlvbnMubmFtZSwgb3B0aW9ucywgdHJ1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdG9wdGlvbnMuZ2V0Q2FjaGVQYXRoT3B0aW9ucyA9IG9wdGlvbnMuZ2V0Q2FjaGVQYXRoT3B0aW9ucyB8fCB7fTtcblxuXHRcdFx0cmV0dXJuIG9wdGlvbnM7XG5cdFx0fSlcblx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVja2V0UGF0aChrZXk6IHN0cmluZywgY2FjaGVQYXRoOiBzdHJpbmcpXG57XG5cdGxldCBmdWxscGF0aDogc3RyaW5nID0gX2J1Y2tldFBhdGgoY2FjaGVQYXRoLCBrZXkpO1xuXG5cdGxldCBwID0gcGF0aC5yZWxhdGl2ZShjYWNoZVBhdGgsIGZ1bGxwYXRoKTtcblxuXHRyZXR1cm4ge1xuXHRcdGZ1bGxwYXRoLFxuXHRcdHBhdGg6IHAsXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRlbnRQYXRoKGludGVncml0eTogc3RyaW5nLCBjYWNoZVBhdGg6IHN0cmluZylcbntcblx0bGV0IGZ1bGxwYXRoOiBzdHJpbmcgPSBfY29udGVudFBhdGgoY2FjaGVQYXRoLCBpbnRlZ3JpdHkpO1xuXG5cdGxldCBwID0gcGF0aC5yZWxhdGl2ZShjYWNoZVBhdGgsIGZ1bGxwYXRoKTtcblxuXHRyZXR1cm4ge1xuXHRcdGZ1bGxwYXRoLFxuXHRcdHBhdGg6IHAsXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNzcmlEYXRhKGRhdGE6IHN0cmluZyB8IERhdGFWaWV3IHwgVHlwZWRBcnJheSk6IHN0cmluZ1xue1xuXHRyZXR1cm4gc3NyaS5mcm9tRGF0YShkYXRhKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3NyaUpTT04oZGF0YSwgaW50ZWdyaXR5Pzogc3RyaW5nKTogc3RyaW5nXG57XG5cdHJldHVybiBoYXNoRGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNoRGF0YShkYXRhOiBzdHJpbmcgfCBEYXRhVmlldyB8IFR5cGVkQXJyYXkpOiBzdHJpbmdcbntcblx0cmV0dXJuIHNzcmkuc3RyaW5naWZ5KHNzcmlEYXRhKGRhdGEpKTtcbn1cblxuLy8gQHRzLWlnbm9yZVxuZXhwb3J0cyA9IE9iamVjdC5mcmVlemUoZXhwb3J0cyk7XG4iXX0=